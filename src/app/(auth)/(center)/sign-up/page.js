'use client'
import React from 'react'
import '../../../../styles/auth/sign_up.css'
import { images } from '../../../../../public/images'
import Image from "next/image";
import { useFormik } from 'formik';
import { register } from '@/api/auth';
import { toast } from 'react-toastify';
// import { getToken } from '@/config/firebase-config';
import { getToken } from 'firebase/messaging';
import { messaging } from '@/config/firebase-config';

const Sign_up = () => {
  // main.js

const vapidKey = "YOUR_VAPID_KEY"; // ƒê∆∞·ª£c l·∫•y t·ª´ Firebase console

// getToken(messaging, { vapidKey }).then((currentToken) => {
//   if (currentToken) {
//     console.log('FCM Token:', currentToken);
//   } else {
//     console.log('No registration token available. Request permission to generate one.');
//   }
// }).catch((err) => {
//   console.log('An error occurred while retrieving token. ', err);
// });
  const {
    values,
    handleBlur,
    errors,
    touched,
    handleChange,
    handleSubmit
  } = useFormik({
    initialValues: {
      name: '',
      phone: '',
      email: '',
      password: '',
      password_again: '',
      affsource: ''
    },
    validate: (values) => {
      const errors = {}
      if (!values.name || values.name.length <= 6) {
        errors.name = 'Ph·∫£i ch·ª©a √≠t nh·∫•t 6 k√Ω t·ª± '
      }
      if (!values.phone || values.phone.length <= 8) {
        errors.phone = 'Ph·∫£i ch·ª©a √≠t nh·∫•t 8 s·ªë '
      }
      if (!values.email) {
        errors.email = 'Y√™u c√¢ÃÄu  email'
      } else if (
        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(values.email)
      ) {
        errors.email = 'Y√™u c√¢ÃÄu  email'
      }
      if (!values.password) {
        errors.password = 'Y√™u c√¢ÃÄu m√¢Ã£t kh√¢Ãâu'
      } else if (values.password.length < 8) {
        errors.password = 'MƒÉÃ£t kh√¢Ãâu phaÃâi tr√™n 8 kyÃÅ t∆∞Ã£'
      }
      if (!values.password_again) {
        errors.password_again = 'B·∫Øt bu·ªôc ph·∫£i nh·∫≠p laÃ£i m√¢Ã£t kh√¢Ãâu'
      } else if (values.password_again.length < 6) {
        errors.password_again = 'Nh√¢Ã£p laÃ£i m√¢Ã£t kh√¢Ãâu ph·∫£i l·ªõn h∆°n 6 k√Ω t·ª±'
      } else if (values.password_again !== values.password) {
        errors.password_again = 'M√¢Ã£t kh√¢Ãâu  kh√¥ng kh·ªõp, th·ª≠ nh√¢Ã£p laÃ£i'
      }
      return errors
    },
    onSubmit: (values) => {
      if (values){

        toast.success('th√†nh c√¥ng r·ªìi n√®')
      }
      console.log(values)
      // register(values)
    }

  })
  return (
    <>
      <div class="form-signup">
        <form onSubmit={handleSubmit} action="" class="form-submit">
          <div class="box-left">
            {/* Image */}
            <Image
              className="object-contain rounded_image"
              priority={true}
              src={images.imgsignup}
              alt="Ezpics Logo"
              class="img-singup"
            />
          </div>
          <div class="box-right">
            <h2 class="title-sign">Ezpics - D√πng l√† th√≠ch! üëã</h2>
            <div class="group-input">
              <p for="">T√™n</p>
              <input type="text" placeholder="T√™n" name='name'
                onBlur={handleBlur}
                onChange={handleChange}
              />
              {touched.name &&
                errors.name && (
                  <span className="text-red-500 text-base">
                    {errors.name}
                  </span>
                )}
            </div>
            <div class="group-input">
              <p for="">S·ªë ƒëi·ªán tho·∫°i</p>
              <input type="text" placeholder="S·ªë ƒëi·ªán tho·∫°i" name='phone'
                onBlur={handleBlur}
                onChange={handleChange}
              />
              {touched.phone &&
                errors.phone && (
                  <span className="text-red-500 text-base">
                    {errors.phone}
                  </span>
                )}
            </div>
            <div class="group-input">
              <p for="">Email</p>
              <input type="text" placeholder="Email" name='email'
                onBlur={handleBlur}
                onChange={handleChange}
              />
              {touched.email &&
                errors.email && (
                  <span className="text-red-500 text-base">
                    {errors.email}
                  </span>
                )}
            </div>
            <div class="group-input-pasword">
              <div class="group-input">
                <p for="">M·∫≠t kh·∫©u</p>
                <input type="text" placeholder="M·∫≠t kh·∫©u" name='password'
                  onBlur={handleBlur}
                  onChange={handleChange}
                />
                {touched.password &&
                  errors.password && (
                    <span className="text-red-500 text-base">
                      {errors.password}
                    </span>
                  )}
              </div>
              <div class="group-input">
                <p for="">Nh·∫≠p l·∫°i m·∫≠t kh·∫©u</p>
                <input type="text" placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u" name='password_again'
                  onBlur={handleBlur}
                  onChange={handleChange}
                />
                {touched.password_again &&
                  errors.password_again && (
                    <span className="text-red-500 text-base">
                      {errors.password_again}
                    </span>
                  )}
              </div>

            </div>
            <div class="group-input">
              <p for="">M√£ gi·ªõi thi·ªáu</p>
              <input type="text" placeholder="M√£ gi·ªõi thi·ªáu" name='affsource'
                onBlur={handleBlur}
                onChange={handleChange}
              />
            </div>
            <button type="submit" class="btn-submit-sign">ƒêƒÉng k√Ω</button>
            <div class="nav-sign">
              <p>B·∫°n ƒë√£ c√≥ t√†i kho·∫£n ? - <a href="">ƒêƒÉng nh·∫≠p</a></p>
            </div>
          </div>
        </form>
      </div>
    </>
  )
}

export default Sign_up
